module.exports=function(e){var s={};function r(t){if(s[t])return s[t].exports;var o=s[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=s,r.d=function(e,s,t){r.o(e,s)||Object.defineProperty(e,s,{enumerable:!0,get:t})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,s){if(1&s&&(e=r(e)),8&s)return e;if(4&s&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&s&&"string"!=typeof e)for(var o in e)r.d(t,o,function(s){return e[s]}.bind(null,o));return t},r.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(s,"a",s),s},r.o=function(e,s){return Object.prototype.hasOwnProperty.call(e,s)},r.p="/dist/",r(r.s=7)}([function(e,s){e.exports=require("mongoose")},function(e,s){e.exports=require("winston")},function(e,s){e.exports=require("crypto-js")},function(e,s){e.exports=require("express")},function(e,s){e.exports=require("winston-redis")},function(e,s){e.exports=require("fs")},function(e,s){e.exports=require("path")},function(e,s,r){e.exports=r(8)},function(e,s,r){"use strict";r.r(s);var t=r(3),o=r.n(t),n=r(1),a=r.n(n),i=r(4),c=r.n(i),u=r(5),l=r.n(u),d=r(6),p=r.n(d),m=r(0),f=r.n(m);var g=class{constructor(e){f.a.connect(e,{useNewUrlParser:!0,useUnifiedTopology:!0,useFindAndModify:!1}),f.a.Promise=global.Promise}checkConnection(){return!!f.a.connection.readyState}};var h={redis:{host:"redis",port:6379,container:"logs",expire:604800},timestamp:{format:"YYYY-MM-DD hh:mm:ss a"},meta:{service:process.env.SERVICE_NAME}};var v=r(2),y=r.n(v);const{Schema:b}=f.a,S=new b({email:{type:String,default:""},password:{type:String,default:""},verificationToken:{type:String,default:""},isVerified:{type:Boolean,default:!1},isDeleted:{type:Boolean,default:!1},signUpDate:{type:Date,default:Date.now()},lastLogin:{type:Date,default:Date.now()}});S.methods.generateHash=e=>y.a.AES.encrypt(e,y.a.SHA256(e).toString()).toString(),S.methods.generateToken=()=>y.a.SHA256(Date.now()).toString(),S.methods.validPassword=(e,s)=>y.a.AES.decrypt(s,y.a.SHA256(e).toString()).toString(y.a.enc.Utf8);var w=f.a.model("User",S);const{Schema:E}=f.a,j=new E({userId:{type:String,default:""},timestamp:{type:Date,default:Date.now()},isDeleted:{type:Boolean,default:!1}});var x=f.a.model("UserSession",j);const P=(e,s,r)=>{e.get(`/${r}/api/hello`,(e,t)=>{t.status(200).json({success:!0,message:`Hello from service '${r}'`}),t.end(s.info(`Hello from service '${r}'`,{status:t.statusCode}))})},$=(e,s,r)=>{e.post(`/${r}/api/login`,(e,r)=>{const{body:t}=e,{email:o,password:n}=t;let a=o;return a?n?(a.toLowerCase(),a.trim(),void w.findOne({email:o},(e,t)=>{if(e)return s.error(e),r.send({success:!1,message:"Error: server error."});if(null===t)return r.send({success:!1,message:"Error: Username or Password incorrect."});if(!t.validPassword(n,t.password))return s.error("Unsuccessful login attempt for user "+t.email),r.send({success:!1,message:"Error: Username or Password incorrect."});if(t.validPassword(n,t.password)){t.lastLogin=new Date,t.save();const e=new x;e.userId=t._id,e.save((e,o)=>e?(s.error(e),r.send({success:!1,message:"Error: server error."})):(s.info(`User ${t.email} logged in`),r.send({success:!0,message:"Valid sign in.",token:o._id})))}})):r.json({success:!1,message:"Error: Password cannot be blank."}):r.json({success:!1,message:"Error: Email cannot be blank."})})},D=(e,s,r)=>{e.get(`/${r}/api/logout`,(e,r)=>{const{query:t}=e,{token:o}=t;x.findOneAndUpdate({_id:o,isDeleted:!1},{$set:{isDeleted:!0}},e=>e?(s.error(e),r.send({success:!1,message:"Error: Server error"})):(s.info("Log-out successful"),r.send({success:!0,message:"Logout successful"})))})},_=(e,s,r)=>{e.post(`/${r}/api/register`,(e,r)=>{const{body:t}=e,{email:o,password:n}=t;let a=o;return a?n?(a.toLowerCase(),a.trim(),void w.find({email:a},(e,t)=>{if(e)return s.error(e),r.json({success:!1,message:"Error: Server error"});if(t.length>0)return s.error("Account already exist for email "+a),r.json({success:!1,message:"Error: Account already exist."});const o=new w;o.email=a,o.password=o.generateHash(n),o.verificationToken=o.generateToken(),o.save(e=>e?(s.error(e),r.json({success:!1,message:e.message})):(r.status(200),s.info("Account created for email "+a,{status:r.statusCode}),r.json({success:!0,data:{email:a}})))})):r.json({success:!1,message:"Error: Password cannot be blank."}):r.json({success:!1,message:"Error: Email cannot be blank."})})},A=(e,s,r)=>{e.get(`/${r}/api/token`,(e,r)=>{const{query:t}=e,{token:o}=t;x.findById(o,(e,t)=>{w.findById(t.userId,(e,t)=>e?(s.error(e),r.json({success:!1})):r.json({success:!0,data:{user:t}}))})})},k=(e,s,r)=>{e.get(`/${r}/api/verify`,(e,r)=>{const{query:t}=e,{token:o}=t;x.find({_id:o,isDeleted:!1},(e,t)=>e?(s.error(e),r.json({success:!1,message:"Error: Server error"})):1!=t.length?(s.error("Invalid session"),r.json({success:!1,message:"Error: Invalid"})):(s.info("User verified successfully"),r.json({success:!0,message:"Verification successful"})))})};(new class{constructor(){this.app=o()(),this.serviceName=process.env.SERVICE_NAME,this.servicePort=process.env.SERVICE_PORT,this.database=process.env.DATABASE_URL||"mongodb://mongo:27017/db",this.logger={},this.path={public:p.a.resolve(__dirname+"/../client/")}}init(){this.config(),this.apiRoutes(),this.reactRoutes(),this.start()}config(){this.app.use(o.a.urlencoded({extended:!0})),this.app.use(o.a.json()),this.app.use(`/${this.serviceName}/public`,o.a.static(this.path.public)),new g(this.database);const e=h;this.logger=a.a.createLogger({format:a.a.format.timestamp(),defaultMeta:e.meta,transports:[new a.a.transports.Console({format:a.a.format.combine(a.a.format.timestamp(e.timestamp),a.a.format.colorize(),a.a.format.simple(),a.a.format.printf(e=>`${e.timestamp} | ${e.level} | ${e.service} | ${e.message}`))}),new c.a(e.redis)]})}apiRoutes(){P(this.app,this.logger,this.serviceName),$(this.app,this.logger,this.serviceName),D(this.app,this.logger,this.serviceName),_(this.app,this.logger,this.serviceName),A(this.app,this.logger,this.serviceName),k(this.app,this.logger,this.serviceName)}reactRoutes(){this.app.get(`/${this.serviceName}/*`,(e,s)=>{const r=l.a.readFileSync(this.path.public+"/index.html").toString();s.set("content-type","text/html"),s.send(r),s.end()})}start(){this.app.listen(this.servicePort,()=>{this.logger.info(`Service '${this.serviceName}' listening on port ${this.servicePort}`)})}}).init()}]);